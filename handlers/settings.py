import datetime

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import update, select
from sqlalchemy.ext.asyncio import AsyncSession

from State.settings_state import settings
from database.database_postgres import User, Search_Connection, async_session
from filters.Captcha_filter import CaptchaFilter
from keyboard.inline.register_kb import choose_gender_set, back_kb, back_kb_nick, back_kb_age
from keyboard.inline.settings_kb import settings_kb_user, hide_settings_red, hide_settings_green
from keyboard.reply.search_stop_kb import stop_search_kb

router = Router()


@router.callback_query(F.data.startswith('back_to_settings'),
                       CaptchaFilter(session_pool=async_session))
async def back_button(callback: CallbackQuery, bot: Bot, state: FSMContext) -> None:
	await state.clear()

	setting_kb = await settings_kb_user()
	await bot.edit_message_text(
		chat_id=callback.message.chat.id,
		message_id=callback.message.message_id,
		text="<code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.</code>",
		reply_markup=setting_kb
	)


@router.message(Command('settings'), CaptchaFilter(session_pool=async_session))
async def settings_py(message: Message, bot: Bot, session: AsyncSession):
	user_id: int = message.from_user.id

	try:
		user_status = await session.execute(select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
		user_status = user_status.fetchone()[0]
	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/settings/settings_py'
		      f'{e}, –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

	if user_status == 2:
		kb = await stop_search_kb()
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞!\n\n'
			     '<code>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ - /cancel</code>',
			reply_markup=kb
		)

	elif user_status == 3:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n'
			     '<code>/next - –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n'
			     '/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥</code>'
		)

	else:
		settings_kb = await settings_kb_user()
		await bot.send_message(
			chat_id=message.chat.id,
			text="<code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.</code>",
			reply_markup=settings_kb
		)


@router.callback_query(F.data.startswith('settings_'),
                       CaptchaFilter(session_pool=async_session))
async def call_settings_user(callback: CallbackQuery, bot: Bot,
                             state: FSMContext, session: AsyncSession) -> None:
	data = callback.data.split('_')[1]
	user_id: int = callback.from_user.id

	try:
		user_status = await session.execute(select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
		user_status = user_status.fetchone()[0]
	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/settings/call_settings_user'
		      f'{e}, –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

	if user_status == 2:
		kb = await stop_search_kb()
		await bot.send_message(
			chat_id=callback.message.chat.id,
			text='‚ùå –í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞!\n\n'
			     '<code>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ - /cancel</code>',
			reply_markup=kb
		)
		return

	elif user_status == 3:
		await bot.send_message(
			chat_id=callback.message.chat.id,
			text='‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n'
			     '<code>/next - –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n'
			     '/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥</code>'
		)
		return

	if data == 'name':
		nick_data = await session.execute(select(User.date_nickname).where(User.user_id == user_id))
		nick_data = nick_data.fetchone()

		if nick_data is not None and nick_data[0] is not None:
			nick_date = datetime.datetime.strptime(nick_data[0], "%Y:%m:%d %H:%M:%S")
		else:
			nick_date = None

		current_time = datetime.datetime.now()

		if nick_date is None or current_time >= nick_date:
			nick = await session.execute(select(User.nickname).where(User.user_id == user_id))
			nick = nick.fetchone()

			if nick is not None and nick[0] is not None:
				kb_back = await back_kb_nick()
				await bot.edit_message_text(
					chat_id=callback.message.chat.id,
					message_id=callback.message.message_id,
					text="<i>–ò–º—è –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ä–∞–∑ –≤ 30 –¥–Ω–µ–π!</i>\n\n"
					     "üìå –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è:",
					reply_markup=kb_back
				)
				await state.set_state(settings.name)

			else:
				kb_back = await back_kb()
				await bot.edit_message_text(
					chat_id=callback.message.chat.id,
					message_id=callback.message.message_id,
					text="<i>–ò–º—è –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å —Ä–∞–∑ –≤ 30 –¥–Ω–µ–π!</i>\n\n"
					     "üìå –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è:",
					reply_markup=kb_back
				)
				await state.set_state(settings.name)
		else:
			remaining_days = (nick_date - current_time).days

			kb_back = await back_kb()
			await bot.edit_message_text(
				chat_id=callback.message.chat.id,
				message_id=callback.message.message_id,
				text=f"<i>–í—ã –Ω–µ–¥–∞–≤–Ω–æ –º–µ–Ω—è–ª–∏ –∏–º—è!\n"
				     f"–°–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑:\n"
				     f"{remaining_days} –¥–Ω–µ–π</i>",
				reply_markup=kb_back
			)

	elif data == 'gender':
		gender = await session.execute(select(User.gender).where(User.user_id == user_id))
		gender = gender.fetchone()
		gender = gender[0] if gender is not None else None

		gender_choose = await choose_gender_set()
		await bot.edit_message_text(
			chat_id=callback.message.chat.id,
			message_id=callback.message.message_id,
			text=f"–¢–≤–æ–π –ø–æ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>{gender}</b>\n"
			     "üåÄ –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª:",
			reply_markup=gender_choose
		)
		await state.set_state(settings.gender)

	elif data == "age":
		age = await session.execute(select(User.age).where(User.user_id == user_id))
		age = age.fetchone()

		if age is not None and age[0] is not None:
			kb_back = await back_kb_age()
			await bot.edit_message_text(
				chat_id=callback.message.chat.id,
				message_id=callback.message.message_id,
				text="‚úçüèª –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
				reply_markup=kb_back
			)
			await state.set_state(settings.age)

		else:
			kb_back = await back_kb()
			await bot.edit_message_text(
				chat_id=callback.message.chat.id,
				message_id=callback.message.message_id,
				text="‚úçüèª –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
				reply_markup=kb_back
			)
			await state.set_state(settings.age)

	elif data == "hide":
		randomize_kb = await session.execute(select(User.spoiler).where(User.user_id == user_id))
		randomize_kb = randomize_kb.fetchone()[0]
		text_spoiler = "üü¢ –í–∫–ª—é—á–µ–Ω–∞."

		kb = await hide_settings_red()

		if randomize_kb == 2:
			kb = await hide_settings_green()
			text_spoiler = "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞."

		await bot.edit_message_text(
			chat_id=callback.message.chat.id,
			message_id=callback.message.message_id,
			text="<i>–î–∞–Ω–Ω–∞—è —Ñ–ª–∞—à–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, "
			     "–≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ—Ç–æ–≤, GIF, –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. "
			     "–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å'</i>\n\n"
			     f"–°–µ–π—á–∞—Å: {text_spoiler}",
			reply_markup=kb
		)


@router.callback_query(F.data.startswith('gen_'), settings.gender)
async def call_froms_gender(callback: CallbackQuery, bot: Bot,
                            session: AsyncSession, state: FSMContext) -> None:
	user_id: int = callback.from_user.id

	try:
		user_status = await session.execute(
			select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
		user_status = user_status.fetchone()[0]
	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/settings/call_froms_gender'
		      f'{e}, –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

	if user_status == 2:
		kb = await stop_search_kb()
		await bot.send_message(
			chat_id=callback.message.chat.id,
			text='‚ùå –í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞!\n\n'
			     '<code>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ - /cancel</code>',
			reply_markup=kb
		)
		return

	elif user_status == 3:
		await bot.send_message(
			chat_id=callback.message.chat.id,
			text='‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n'
			     '<code>/next - –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n'
			     '/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥</code>'
		)
		return

	gender = callback.data.split('_')[1]
	setting_kb = await settings_kb_user()

	if gender == 'male':
		gender = '–ú—É–∂—Å–∫–æ–π'

		await session.execute(update(User).where(User.user_id == user_id).values(gender=gender))
		await session.commit()

		await bot.edit_message_text(
			chat_id=callback.message.chat.id,
			message_id=callback.message.message_id,
			text="<code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.</code>",
			reply_markup=setting_kb
		)
		await state.clear()

	elif gender == 'female':
		gender = '–ñ–µ–Ω—Å–∫–∏–π'

		await session.execute(update(User).where(User.user_id == user_id).values(gender=gender))
		await session.commit()

		await bot.edit_message_text(
			chat_id=callback.message.chat.id,
			message_id=callback.message.message_id,
			text="<code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.</code>",
			reply_markup=setting_kb
		)
		await state.clear()

	else:
		gen = await choose_gender_set()
		await bot.send_message(
			chat_id=callback.message.chat.id,
			text="ü§ñ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
			reply_markup=gen
		)


@router.message(settings.gender)
async def call_froms_gender_Message_error(message: Message, bot: Bot) -> None:
	# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∞ –Ω–µ –≤—ã–±—Ä–∞–ª callback –∑–∞–ø—Ä–æ—Å.
	gender = await choose_gender_set()
	await bot.send_message(
		chat_id=message.chat.id,
		text="ü§ñ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
		reply_markup=gender
	)

	try:
		await bot.delete_message(
			chat_id=message.chat.id,
			message_id=message.message_id - 1
		)
		await bot.delete_message(
			chat_id=message.chat.id,
			message_id=message.message_id
		)
	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/settings/call_froms_gender_Message_error'
		      f'{e}, –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')


@router.message(settings.age)
async def age_choose_fsm(message: Message, bot: Bot,
                         session: AsyncSession, state: FSMContext) -> None:
	age: any = message.text
	user_id: int = message.from_user.id

	if not age.isdigit():
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
		)

	elif int(age) < 16 or int(age) > 90:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ'
		)

	else:
		await session.execute(update(User).where(User.user_id == user_id).values(age=age))
		await session.commit()

		setting_kb = await settings_kb_user()
		await bot.send_message(
			chat_id=message.chat.id,
			text="<code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.</code>",
			reply_markup=setting_kb
		)
		await state.clear()


@router.callback_query(F.data == 'dont_age_away', settings.age)
async def name_choose_fsm(callback: CallbackQuery, bot: Bot,
                          state: FSMContext, session: AsyncSession) -> None:
	user_id: int = callback.from_user.id

	search = await session.execute(select(User).where(User.user_id == user_id))
	search_row = search.fetchone()

	if search_row is not None and search_row[0] is not None:
		await bot.delete_message(
			chat_id=callback.message.chat.id,
			message_id=callback.message.message_id
		)

		await session.execute(update(User).where(User.user_id  == user_id).values(age=None))
		await session.commit()

		kb = await settings_kb_user()
		await bot.send_message(
			chat_id=callback.message.chat.id,
			text="<code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.</code>",
			reply_markup=kb
		)
		await state.clear()


@router.callback_query(F.data == 'dont_age_away')
async def name_choose_fsm(callback: CallbackQuery, session: AsyncSession) -> None:
	user_id: int = callback.from_user.id

	search = await session.execute(select(User.age).where(User.user_id == user_id))
	search_row = search.fetchone()

	if search_row is not None and search_row[0] is not None:
		await callback.answer(
			chat_id=callback.message.chat.id,
			text='–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!',
			show_alert=True
		)


@router.callback_query(F.data == 'dont_nick_away', settings.name)
async def name_choose_fsm(callback: CallbackQuery, bot: Bot,
                          state: FSMContext, session: AsyncSession) -> None:
	user_id: int = callback.from_user.id

	search = await session.execute(select(User).where(User.user_id == user_id))
	search_row = search.fetchone()

	if search_row is not None and search_row[0] is not None:
		await bot.delete_message(
			chat_id=callback.message.chat.id,
			message_id=callback.message.message_id
		)

		tri_days_later = datetime.datetime.now() + datetime.timedelta(days=30)
		formatted_time = tri_days_later.strftime("%Y:%m:%d %H:%M:%S")

		await session.execute(update(User).where(User.user_id  == user_id).values(nickname=None, date_nickname=formatted_time))
		await session.commit()

		kb = await settings_kb_user()
		await bot.send_message(
			chat_id=callback.message.chat.id,
			text="<code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.</code>",
			reply_markup=kb
		)
		await state.clear()


@router.callback_query(F.data == 'dont_nick_away')
async def name_choose_fsm(callback: CallbackQuery, session: AsyncSession) -> None:
	user_id: int = callback.from_user.id

	search = await session.execute(select(User.nickname).where(User.user_id == user_id))
	search_row = search.fetchone()

	if search_row is not None and search_row[0] is not None:
		await callback.answer(
			chat_id=callback.message.chat.id,
			text='–í–∞—à –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!',
			show_alert=True
		)


@router.message(settings.name)
async def name_choose_fsm(message: Message, bot: Bot,
                          state: FSMContext, session: AsyncSession) -> None:
	name: any = message.text
	user_id: int = message.from_user.id

	nick = await session.execute(select(User.nickname).where(User.nickname == name))
	nick = nick.fetchone()

	if nick is not None and nick[0] is not None:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'
		)
		return

	if len(name) <= 2 or len(name) > 20:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è'
		)

	elif len(name.split()) > 1:
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤'
		)

	elif not name.isalnum():
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã'
		)

	elif not name.isascii():
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'‚ùå –ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã'
		)
	else:
		tri_days_later = datetime.datetime.now() + datetime.timedelta(days=30)
		formatted_time = tri_days_later.strftime("%Y:%m:%d %H:%M:%S")

		await session.execute(update(User).where(User.user_id == user_id).values(nickname=name, date_nickname=formatted_time))
		await session.commit()

		setting_kb = await settings_kb_user()
		await bot.send_message(
			chat_id=message.chat.id,
			text="<code>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ç –ø—É–Ω–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.</code>",
			reply_markup=setting_kb
		)
		await state.clear()