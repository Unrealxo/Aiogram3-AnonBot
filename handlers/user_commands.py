import asyncio

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select, update, delete
from sqlalchemy.ext.asyncio import AsyncSession

from database.database_postgres import Search_Connection, Connection, async_session, User
from filters.Captcha_filter import CaptchaFilter
from keyboard.inline.gender_search_kb import gender_search
from keyboard.inline.warnings_kb import alert_user, alert_current
from keyboard.reply.in_connect_kb import reply_in_connect
from keyboard.reply.register_kb import create_kb_reg_reply
from keyboard.reply.search_stop_kb import stop_search_kb

router = Router()


@router.message(Command("cancel"), CaptchaFilter(session_pool=async_session))
async def cancel_searching_cancel(message: Message, bot: Bot,
                                  session: AsyncSession) -> None:
	user_id: int = message.from_user.id

	try:
		user_status = await session.execute(select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
		user_status = user_status.fetchone()[0]
	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/user_commands/cancel_searching_cancel'
		      f'{e}, –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

	if user_status == 1:
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—â–µ—Ç–µ!",
			reply_markup=keyboard
		)

	elif user_status == 2:
		# –û—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –∏ —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–µ –Ω–∞–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
		await session.execute(update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=1, gender=1, interests=1))
		await session.commit()

		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–±–æ—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!",
			reply_markup=keyboard
		)

	elif user_status == 3:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n'
			     '<code>/next - –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n'
			     '/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥</code>'
		)
	else:
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞!",
			reply_markup=keyboard
		)


@router.message(F.text == 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫',
                CaptchaFilter(session_pool=async_session))
async def cancel_searching(message: Message, bot: Bot, session: AsyncSession) -> None:
	user_id: int = message.from_user.id

	try:
		user_status = await session.execute(
			select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
		user_status = user_status.fetchone()[0]
	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/user_commands/cancel_searching'
		      f'{e}, –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

	if user_status == 1:
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—â–µ—Ç–µ!",
			reply_markup=keyboard
		)

	elif user_status == 2:
		# –û—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –∏ —Å—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–µ –Ω–∞–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
		await session.execute(
			update(Search_Connection).where(Search_Connection.user_id == user_id)
			.values(search_status=1, gender=1, interests=1))
		await session.commit()

		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–±–æ—Ä —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!",
			reply_markup=keyboard
		)
	elif user_status == 3:
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫!\n\n'
			     '<code>/next - –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n'
			     '/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥</code>'
		)
	else:
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞!",
			reply_markup=keyboard
		)


@router.message(Command('stop'), CaptchaFilter(session_pool=async_session))
async def stop_for_seatching_and_chating(message: Message, bot: Bot,
                                         session: AsyncSession) -> None:
	user_id: int = message.from_user.id

	try:
		user_status = await session.execute(
			select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
		user_status = user_status.fetchone()[0]

		gender = await session.execute(
			select(Search_Connection.gender).where(Search_Connection.user_id == user_id))
		gender = gender.fetchone()[0]

		interes = await session.execute(
			select(Search_Connection.interests).where(Search_Connection.user_id == user_id))
		interes = interes.fetchone()[0]

	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/user_commands/stop_for_seatching_and_chating'
		      f'{e}')

	if user_status == 1:
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—â–µ—Ç–µ!",
			reply_markup=keyboard
		)

	elif user_status == 2:
		kb = await stop_search_kb()
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞!\n\n'
			     '<code>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ - /cancel</code>',
			reply_markup=kb
		)

	elif user_status == 3 and gender == 1 and interes == 1:
		try:
			# –ò—â–µ–º USER_ID –Ω–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
			opponetn_to_connecting = await session.execute(
				select(Connection.connect_user_id).where(Connection.user_id == user_id))
			opponetn_to_connecting = opponetn_to_connecting.fetchone()[0]
			# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à —Å—Ç–∞—Ç—É—Å.
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=1))
			# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
			await session.execute(update(Search_Connection).where(Search_Connection.user_id == opponetn_to_connecting).values(search_status=2))
			opponetn_to_connecting2 = await session.execute(
				select(Search_Connection.search_status).where(Connection.user_id == opponetn_to_connecting))
			opponetn_to_connecting2 = opponetn_to_connecting2.fetchone()[0]
			# –£–±–∏–∞—Ä–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ –±–¥ –¥–ª—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

			await session.execute(delete(Connection).where(Connection.user_id == user_id))
			await session.execute(delete(Connection).where(Connection.user_id == opponetn_to_connecting))
			await session.commit()
		except Exception as e:
			print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/user_commands/stop_for_seatching_and_chating'
			      f'{e}. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Ç–µ—Ä—è–Ω–æ.')

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–º.
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥!",
			reply_markup=keyboard
		)

		await bot.send_message(
			chat_id=opponetn_to_connecting,
			text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è..."
		)

		await user_raiting(user_id, current_id=opponetn_to_connecting, bot=bot, message=message)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.
		kb = await stop_search_kb()
		await bot.send_message(
			chat_id=opponetn_to_connecting,
			text='üîé –ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...',
			reply_markup=kb
		)
		await asyncio.sleep(25)

		if opponetn_to_connecting2 == 2:
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == opponetn_to_connecting).values(search_status=1))
			await session.commit()

			keyboard = await create_kb_reg_reply()
			await bot.send_message(
				chat_id=opponetn_to_connecting,
				text="–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–∞–π—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",
				reply_markup=keyboard
			)
	elif user_status == 3 and gender == 2 and interes == 1:
		try:
			# –ò—â–µ–º USER_ID –Ω–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
			opponetn_to_connecting = await session.execute(
				select(Connection.connect_user_id).where(Connection.user_id == user_id))
			opponetn_to_connecting = opponetn_to_connecting.fetchone()[0]
			# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à —Å—Ç–∞—Ç—É—Å.
			await session.execute(update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=1, gender=1))
			# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
			await session.execute(update(Search_Connection).where(Search_Connection.user_id == opponetn_to_connecting).values(search_status=1, gender=1))

			# –£–±–∏–∞—Ä–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ –±–¥ –¥–ª—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
			await session.execute(delete(Connection).where(Connection.user_id == user_id))
			await session.execute(delete(Connection).where(Connection.user_id == opponetn_to_connecting))
			await session.commit()
		except Exception as e:
			print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/user_commands/stop_for_seatching_and_chating'
			      f'{e}. –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–º
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥!",
			reply_markup=keyboard
		)

		kb = await stop_search_kb()
		await bot.send_message(
			chat_id=opponetn_to_connecting,
			text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è...",
			reply_markup=kb
		)

		await user_raiting(user_id, current_id=opponetn_to_connecting, bot=bot, message=message)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.
		kb = await gender_search()
		await bot.send_message(
			chat_id=opponetn_to_connecting,
			text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –ø–æ–ª—É –±—É–¥–µ—Ç –∏–¥—Ç–∏ –ø–æ–∏—Å–∫.',
			reply_markup=kb
		)
	else:
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã –Ω–µ –æ–±—â–∞–ª–∏—Å—å —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, —á—Ç–æ–±—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥!!",
			reply_markup=keyboard
		)


@router.message(Command('next'), CaptchaFilter(session_pool=async_session))
async def stop_for_seatching_and_chating_next(message: Message, bot: Bot,
                                              session: AsyncSession) -> None:
	user_id: int = message.from_user.id

	try:
		user_status = await session.execute(
			select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
		user_status = user_status.fetchone()[0]

		gender = await session.execute(
			select(Search_Connection.gender).where(Search_Connection.user_id == user_id))
		gender = gender.fetchone()[0]

		interes = await session.execute(
			select(Search_Connection.interests).where(Search_Connection.user_id == user_id))
		interes = interes.fetchone()[0]

		if user_status == 1:
			keyboard = await create_kb_reg_reply()
			await bot.send_message(
				chat_id=message.chat.id,
				text="–í—ã –µ—â—ë –Ω–∏–∫–æ–≥–æ –Ω–µ –∏—â–µ—Ç–µ!",
				reply_markup=keyboard
			)

		elif user_status == 2:
			kb = await stop_search_kb()
			await bot.send_message(
				chat_id=message.chat.id,
				text='‚ùå –í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞!\n\n'
				     '<code>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ - /cancel</code>',
				reply_markup=kb
			)

		elif user_status == 3 and gender == 1 and interes == 1:
			# –ò—â–µ–º USER_ID –Ω–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
			opponetn_to_connecting = await session.execute(
				select(Connection.connect_user_id).where(Connection.user_id == user_id))
			opponetn_to_connecting = opponetn_to_connecting.fetchone()[0]
			# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à —Å—Ç–∞—Ç—É—Å.
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=2))

			# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == opponetn_to_connecting).values(
					search_status=2))
			# –£–±–∏–∞—Ä–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ –±–¥ –¥–ª—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
			await session.execute(delete(Connection).where(Connection.user_id == user_id))
			await session.execute(delete(Connection).where(Connection.user_id == opponetn_to_connecting))
			await session.commit()

			await user_raiting(user_id, current_id=opponetn_to_connecting, bot=bot, message=message)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–º.
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=2))
			await session.commit()

			kb = await stop_search_kb()
			await bot.send_message(
				chat_id=message.chat.id,
				text='üîé –ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...',
				reply_markup=kb
			)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.
			await bot.send_message(
				chat_id=opponetn_to_connecting,
				text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è..."
			)

			kb = await stop_search_kb()
			await bot.send_message(
				chat_id=opponetn_to_connecting,
				text='üîé –ò–¥—ë—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...',
				reply_markup=kb
			)

			# –ò—â–µ—Ç –≤—Å–µ—Ö users –≥–¥–µ—É –∏—Ö —Å—Ç–∞—Ç—É—Å == 2, –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–≤—è–∑—å.
			search_user_to_message = await session.execute(
				select(Search_Connection.user_id).where(Search_Connection.search_status == 2,
				                                        Search_Connection.user_id != user_id,
				                                        Search_Connection.gender == 1))

			search_user_to_message = search_user_to_message.fetchone()[0] if search_user_to_message else None

			interests_user_to_search = await session.execute(select(User.user_interests)
			                                                 .where(User.user_id == search_user_to_message))
			interests_user_to_search = interests_user_to_search.fetchall() if interests_user_to_search else None

			interests_user = await session.execute(select(User.user_interests)
			                                       .where(User.user_id == user_id))
			interests_user = interests_user.fetchall() if interests_user else None

			if (not interests_user or not interests_user[0][0]) and (
					not interests_user_to_search or not interests_user_to_search[0][0]):
				if search_user_to_message:
					# —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è.
					await session.execute(
						update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=3))
					await session.execute(
						update(Search_Connection).where(Search_Connection.user_id == search_user_to_message).values(
							search_status=3))
					# –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
					search_status = Connection(user_id=user_id, connect_user_id=search_user_to_message)
					search_status2 = Connection(user_id=search_user_to_message, connect_user_id=user_id)
					session.add(search_status)
					session.add(search_status2)
					await session.commit()

					text = ("üòä –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n"
					        "üïπÔ∏è–ù–µ—Ç –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!\n\n"
					        '<blockquote>/next - –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫</blockquote>\n'
					        '<blockquote>/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥</blockquote>')

					kb = await reply_in_connect()
					await bot.send_message(
						chat_id=int(search_user_to_message),
						text=text,
						reply_markup=kb
					)
					await bot.send_message(
						chat_id=user_id,
						text=text,
						reply_markup=kb
					)
			asyncio.create_task(cancel_search_after_timeout(user_id, message, bot, session))

			interests_user_to_search = interests_user_to_search[0][0] if interests_user_to_search else None
			interests_user_to_search = set(interests_user_to_search.split(', '))

			interests_user = interests_user[0][0] if interests_user else None
			interests_user = set(interests_user.split(', '))

			if interests_user & interests_user_to_search:
				if search_user_to_message is not None:
					# —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ä–µ–∂–∏–º –æ–±—â—É–µ–Ω–∏—è.
					await session.execute(
						update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=3))
					await session.execute(
						update(Search_Connection).where(Search_Connection.user_id == search_user_to_message).values(
							search_status=3))
					# –°–æ–∑–¥–∞—ë–º –∫–æ–ª–æ–Ω–∫–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
					search_status = Connection(user_id=user_id, connect_user_id=search_user_to_message)
					search_status2 = Connection(user_id=search_user_to_message, connect_user_id=user_id)
					session.add(search_status)
					session.add(search_status2)
					await session.commit()

					common_interests = interests_user & interests_user_to_search

					text = ("üòä –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n\n"
					        f"üïπÔ∏è –û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(common_interests)}\n\n"
					        '<blockquote>/next - –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫</blockquote>\n'
					        '<blockquote>/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥</blockquote>')

					kb = await reply_in_connect()
					await bot.send_message(
						chat_id=int(search_user_to_message),
						text=text,
						reply_markup=kb
					)
					await bot.send_message(
						chat_id=user_id,
						text=text,
						reply_markup=kb
					)

			asyncio.create_task(cancel_search_after_timeout(user_id, message, bot, session))

		elif user_status == 3 and gender == 2 and interes == 1:
			# –ò—â–µ–º USER_ID –Ω–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ .
			opponetn_to_connecting = await session.execute(
				select(Connection.connect_user_id).where(Connection.user_id == user_id))
			opponetn_to_connecting = opponetn_to_connecting.fetchone()[0]
			# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à —Å—Ç–∞—Ç—É—Å.
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=1,
				                                                                             gender=1))
			# –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == opponetn_to_connecting).values(
					search_status=1, gender=1))
			# –£–±–∏–∞—Ä–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ –±–¥ –¥–ª—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
			await session.execute(delete(Connection).where(Connection.user_id == user_id))
			await session.execute(delete(Connection).where(Connection.user_id == opponetn_to_connecting))
			await session.commit()

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–º.
			kb = await gender_search()
			await bot.send_message(
				chat_id=message.chat.id,
				text="–í—ã–±–µ—Ä–∏ –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞!",
				reply_markup=kb
			)
			await bot.send_message(
				chat_id=opponetn_to_connecting,
				text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è..."
			)

			await user_raiting(user_id, current_id=opponetn_to_connecting, bot=bot, message=message)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.
			kb = await gender_search()
			await bot.send_message(
				chat_id=opponetn_to_connecting,
				text='–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –ø–æ–ª—É –±—É–¥–µ—Ç –∏–¥—Ç–∏ –ø–æ–∏—Å–∫.',
				reply_markup=kb
			)
		else:
			keyboard = await create_kb_reg_reply()
			await bot.send_message(
			chat_id=message.chat.id,
			text="–í—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è —á—Ç–æ–±—ã —Å–∫–∏–ø–Ω—É—Ç—å –¥–∏–∞–ª–æ–≥.",
			reply_markup=keyboard
		)
	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/user_commands/stop_for_seatching_and_chating_next'
		      f'{e}')


async def cancel_search_after_timeout2(user_id, message, bot, session) -> None:
	try:
		# –ü–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞.
		status_users = await session.execute(
			select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
		status_users = status_users.fetchone()[0]

		await asyncio.sleep(25)

		if status_users == 2:
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=1))
			await session.commit()

			keyboard = await create_kb_reg_reply()
			await bot.send_message(
				chat_id=message.chat.id,
				text="–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–∞–π—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",
				reply_markup=keyboard
			)

	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/user_commands/stop_for_seatching_and_chating'
		      f'{e}')


@router.message(F.text == '‚≠ï –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', CaptchaFilter(session_pool=async_session))
async def chat_stop_rus(message: Message, bot: Bot, session: AsyncSession) -> None:
	await stop_for_seatching_and_chating(message, bot, session)


@router.message(F.text == 'ü•± –°–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫', CaptchaFilter(session_pool=async_session))
async def chat_next_rus(message: Message, bot: Bot, session: AsyncSession) -> None:
	await stop_for_seatching_and_chating_next(message, bot, session)


@router.message(F.text == '‚úçüèª –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å',
                CaptchaFilter(session_pool=async_session))
async def chat_next_rus(message: Message, bot: Bot, session: AsyncSession) -> None:
	user_id: int = message.from_user.id

	user = await session.execute(
		select(Search_Connection.search_status).where(Search_Connection.user_id == user_id))
	status_user = user.fetchone()[0]

	current_ids_result = await session.execute(
		select(Connection.connect_user_id).where(Connection.user_id == user_id)
	)
	current_ids = current_ids_result.fetchone()

	if status_user == 3:
		link_text = '–í–æ—Ç –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å!'
		link = (f"<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
		        f"<a href='tg://openmessage?user_id={user_id}'>{link_text}</a>")

		await bot.send_message(
			chat_id=current_ids[0],
			text=link
		)
		await bot.send_message(
			chat_id=message.chat.id,
			text='<b>–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>'
		)

	elif status_user == 2:
		kb = await stop_search_kb()
		await bot.send_message(
			chat_id=message.chat.id,
			text='‚ùå –í—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞!\n\n'
			     '<code>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ–∏—Å–∫ - /cancel</code>',
			reply_markup=kb
		)

	elif status_user == 1:
		keyboard = await create_kb_reg_reply()
		await bot.send_message(
			chat_id=message.chat.id,
			text=f'<b>–í—ã –Ω–∏ —Å –∫–µ–º –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ!</b>',
			reply_markup=keyboard
		)


async def cancel_search_after_timeout(user_id, message, bot, session) -> None:
	try:
		await asyncio.sleep(25)

		status_users = await asyncio.wait_for(
			session.execute(select(Search_Connection.search_status).where(Search_Connection.user_id == user_id)),
			timeout=10
		)
		status_users = status_users.fetchone()[0]

		if status_users == 2:
			await session.execute(
				update(Search_Connection).where(Search_Connection.user_id == user_id).values(search_status=1))
			await session.commit()

			keyboard = await create_kb_reg_reply()
			await bot.send_message(
				chat_id=message.chat.id,
				text="–ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏–∫–æ–≥–æ –Ω–∞–π—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",
				reply_markup=keyboard
			)

	except Exception as e:
		print('–û—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ç–æ—Ä–µ handlers/user_commands/cancel_search_after_timeout'
		      f'{e}')


async def user_raiting(user_id, current_id, bot, message) -> None:
	kb = await alert_user(user_id)
	await bot.send_message(
		chat_id=current_id,
		text='<i>–ü–æ–º–æ–≥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞</i>',
		reply_markup=kb
	)

	kb = await alert_current(current_id)
	await bot.send_message(
		chat_id=message.chat.id,
		text='<i>–ü–æ–º–æ–≥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞</i>',
		reply_markup=kb
	)